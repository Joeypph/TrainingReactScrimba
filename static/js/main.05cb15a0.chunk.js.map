{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","state","count","color","Increment","bind","Decrement","setCounter","this","setState","prevState","prevProps","newColor","randomColor","style","onClick","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8QAoTeA,E,kDAhGX,aAAc,IAAD,8BACT,gBACKC,MAAM,CACPC,MAAO,EACPC,MAAO,KAEX,EAAKC,UAAW,EAAKA,UAAUC,KAAf,gBAChB,EAAKC,UAAW,EAAKA,UAAUD,KAAf,gBAChB,EAAKE,WAAY,EAAKA,WAAWF,KAAhB,gBARR,E,6CAWb,WACIG,KAAKC,UAAS,SAAAC,GACV,MAAM,CACFR,MAAOQ,EAAUR,MAAQ,Q,uBAIrC,WACIM,KAAKC,UAAS,SAAAC,GACV,MAAM,CACFR,MAAyB,EAAlBQ,EAAUR,Y,wBAI7B,WACIM,KAAKC,UAAS,SAAAC,GACV,MAAM,CACFR,MAAOQ,EAAUR,MAAQ,Q,gCAMrC,SAAmBS,EAAWD,GAC1B,GAAGA,EAAUR,QAAUM,KAAKP,MAAMC,MAAO,CACrC,IAAMU,EAAWC,MACjBL,KAAKC,SAAS,CAACN,MAAOS,O,oBAG9B,WACI,OACI,gCACI,8BACI,oBAAIE,MAAO,CAACX,MAAOK,KAAKP,MAAME,OAA9B,SAAuCK,KAAKP,MAAMC,UAElD,wBAAQa,QAASP,KAAKJ,UAAtB,0BACJ,8BACI,wBAAQW,QAASP,KAAKF,UAAtB,+BAEJ,8BACI,wBAAQS,QAASP,KAAKD,WAAtB,4C,GApDFS,IAAMC,WCvMTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCMdQ,IAASC,OAAO,cAAC,IAAMC,WAAP,UAAkB,cAAC,EAAD,MAA2BC,SAASC,eAAe,SASrFb,M","file":"static/js/main.05cb15a0.chunk.js","sourcesContent":["import './App.css';\n\nimport React from \"react\"\nimport randomColor from \"randomcolor\"\n//import TodoItem from \"./components/TodoItem\"\n//import todosData from \"./todosData\"\n\n//import Joke from   \"./components/Joke\"\n//import jokesData from \"./jokesData\"\n//import Product from \"./components/Product\"\n//import vschoolProducts from \"./vschoolProducts\"\n\n\n//joke function\n/*functi Aonpp(){\n\n\n    const jokeComponents = jokesData.map( (joke) =>{\n        return(\n            <Joke key={joke.id} question={joke.question} punchline={joke.question}/>\n        )\n    })\n    return(\n        <div>\n            {jokeComponents}\n        </div>     \n    )\n}*/\n/*function app for product\nfunction App() {\n    const productComponents = vschoolProducts.map((item)=>{\n        return(\n            <Product key={item.id} product={item}/>\n        )\n    })\n  return (\n    <div>\n        {productComponents}\n    </div>\n  )\n}\nfunction  App() {\n    const todoItems = todosData.map((item=>{\n        return(\n            <TodoItem key={item.id} item={item}/>\n        )\n    }))\n    return(\n        <div className=\"todo-list\">\n            {todoItems}\n        </div>\n    )\n    \n}*/\n/* start using class based Components\nclass App extends React.Component {\n    \n    yourMethodHere() {\n        \n    }\n    \n    render() {\n        return (\n            <div>\n                <h1>{this.props.whatever}</h1>\n            </div>\n        )\n    }\n}\n\n//Class-based Components Practice\n\n// #1\nclass App extends React.Component{\n    render(){\n        return (\n            <div>\n                <Header username=\"Joeypph\"/>\n                <Greeting />\n            </div>\n        )\n    }\n}\n\n// #2\nclass  Header extends React.Component {\n    render(){\n        return (\n            <header>\n                <p>Welcome, {this.props.username}!</p>\n            </header>\n        )\n    }\n}\n\n// #3\nclass Greeting extends React.Component {\n    render(){\n        const date = new Date()\n        const hours = date.getHours()\n        let timeOfDay\n        \n        if (hours < 12) {\n            timeOfDay = \"morning\"\n        } else if (hours >= 12 && hours < 17) {\n            timeOfDay = \"afternoon\"\n        } else {\n            timeOfDay = \"night\"\n        }\n        return (\n            <h1>Good {timeOfDay} to you, sir or madam!</h1>\n        )\n    }\n}\nclass App extends React.Component{\n    constructor(){\n        super()\n        this.state={\n            answer:\"yes,perro\"\n        }\n    }\n    render(){\n        return(\n            <div>\n                <h1>Is state important to know?{this.state.a}</h1>\n            </div>\n        )\n    }\n}\n\n// Challenge:\n// Given an incomplete class-based component without a constructor, \n// add a constructor and initialize state to fix the broken component.\nclass App extends React.Component{\n    constructor( ){\n        super()\n        this.state={\n            name:\"José\",\n            age:\"16\"\n        }\n    }\n    render() {\n        return(\n              <div>\n                  <h1>{this.state.name}</h1>\n                  <h3>{this.state.age}</h3>\n              </div>\n        )   \n    }\n}*/\n\n\n// Given a stateless functional component, add state to it\n// state should have a property called `isLoggedIn` which is a boolean\n// (true if logged in, false if not)\n// Then, give your best shot at rendering the word \"in\" if the user is logged in\n// or \"out\" if the user is logged out.\n\n/*class App extends Component {\n    constructor() {\n        super()\n        this.state = {\n            isLoggedIn: true\n        }\n    }\n    render() {\n        let wordDisplay\n        if (this.state.isLoggedIn){\n            wordDisplay=\"in\"\n        }else{\n            wordDisplay=\"out\"\n        }\n        return (\n            <div>\n                <h1>You are currently logged {wordDisplay}</h1>\n            </div>\n        )\n    }\n}*/\n/*class App extends Component {\n    constructor(){\n        super()\n        this.state={\n            todos:todosData\n        }\n    }\n        render(){\n            const todoItems = this.state.todos.map(item => <TodoItem key={item.id} item={item}/>)\n            return (\n                <div className=\"todo-list\">\n                    {todoItems}\n                </div>\n        )   \n    }\n}*/\n/*\nfunction handleClick() {\n    console.log(\"I was clicked\")\n    \n}\nfunction App() {\n    return(\n        <div>\n            <img onMouseOver ={()=>console.log(\"Im hovering\")} src=\"https://www.fillmurray.com/200/100\"/>\n            <br />\n            <br />\n            <button onClick={handleClick}>Click me</button>\n    </div>\n    )\n}*/\n\nclass App extends React.Component{\n    constructor(){\n        super()\n        this.state={\n            count: 0,\n            color: \" \"\n        }\n        this.Increment= this.Increment.bind(this)\n        this.Decrement= this.Decrement.bind(this)\n        this.setCounter= this.setCounter.bind(this)\n\n    }\n    Increment(){\n        this.setState(prevState=>{\n            return{\n                count: prevState.count + 1\n            }\n        })\n    }\n    Decrement(){\n        this.setState(prevState=>{\n            return{\n                count: prevState.count * 2\n            }\n        })\n    }\n    setCounter(){\n        this.setState(prevState=>{\n            return{\n                count: prevState.count = 0\n            }\n        })\n    }\n    //it could be easy to  color: randmColor() to every state,but what if we have more tha 1 state? thats when lifecyles saved us, cause we don´t need to c/p that\n    //line to every state,you just do it ones!!\n    componentDidUpdate(prevProps, prevState) {\n        if(prevState.count !== this.state.count) {\n            const newColor = randomColor()\n            this.setState({color: newColor})\n        }\n    }\n    render() {\n        return(\n            <div>\n                <div>\n                    <h1 style={{color: this.state.color}}>{this.state.count}</h1>\n                </div>\n                    <button onClick={this.Increment}>Change by 1!</button>\n                <div>\n                    <button onClick={this.Decrement}>Change times 2!</button>\n                </div>\n                <div >\n                    <button onClick={this.setCounter}>Set to 0 the counter </button>               \n                </div>\n            </div>\n        )\n    }\n}\n\n/*class App extends React.Component {\n    constructor() {\n        super()\n        this.state = {\n            todos: todosData\n        }\n        this.handleChange = this.handleChange.bind(this)\n    }\n    \n    handleChange(id) {\n        this.setState(prevState => {\n            const updatedTodos = prevState.todos.map(todo => {\n                if (todo.id === id) {\n                    return {\n                        ... todo,completed: !todo.completed\n                    }\n                }\n                return todo\n               \n            })\n            return {\n                todos: updatedTodos\n            }\n          \n        })\n    }\n    \n    render() {\n        const todoItems = this.state.todos.map(item => <TodoItem key={item.id} item={item} handleChange={this.handleChange}/>)\n        \n        return (\n            <div className=\"todo-list\">\n                {todoItems}\n            </div>\n        )    \n    }\n}*/\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\n// From scratch, initialize the React app\n// Render an <App /> component\n// Create the <App /> component from scratch\n// Have the <App /> component render 3 or 4 checkboxes with paragraphs or spans next to it\n// like you're making a todo list with some hard-coded items on it\n\nReactDOM.render(<React.StrictMode><App /></React.StrictMode>,document.getElementById('root'));\n\n\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}